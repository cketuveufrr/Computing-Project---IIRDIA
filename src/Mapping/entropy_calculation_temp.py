import numpy as np
import yaml
from PIL import Image
import math

def load_slam_map(yaml_path):
    """
    We loading a SLAM map from a YAML file generated by our ROS map_server
    """
    with open(yaml_path, 'r') as f:
        meta = yaml.safe_load(f)

    img_path = meta['image']
    

    img = Image.open(img_path)
    data = np.array(img)  
    
    # 3) Seuils venant du YAML
    free_thresh     = meta.get('free_thresh',     0.196)  # par défaut ROS
    occupied_thresh = meta.get('occupied_thresh', 0.65)
    
    # 4) Conversion en probas :
    #    pixel > free_thresh*255    => libre (p=0.0)
    #    pixel < occupied_thresh*255=> occupé (p=1.0)
    #    sinon           => inconnu (p=0.5)
    p = np.zeros_like(data, dtype=float)
    p[data >= free_thresh*255]       = 0.0
    p[data <= occupied_thresh*255]   = 1.0
    mask_unknown = (data > occupied_thresh*255) & (data < free_thresh*255)
    p[mask_unknown]                  = 0.5
    
    return p

def cell_entropy(p):
    """
    Entropie binaire d'une cellule de probabilité p.
    H(p) = -p log2 p - (1-p) log2(1-p), avec H(0)=H(1)=0.
    """
    if p <= 0.0 or p >= 1.0:
        return 0.0
    return -p * math.log2(p) - (1-p) * math.log2(1-p)

# Version vectorisée pour s'appliquer à un tableau
_vectorized_entropy = np.vectorize(cell_entropy)

def map_entropy(prob_map, per_cell=False):
    """
    Calcule l'entropie d'une carte :
      - si per_cell=False (par défaut) : retourne la somme des H(p_ij)
      - si per_cell=True : retourne la grille H(p_ij) de même forme que prob_map
    """
    H = _vectorized_entropy(prob_map)
    return H if per_cell else H.sum()

if __name__ == "__main__":
    # Exemple d'utilisation
    yaml_file = "map.yaml"   # chemin vers le fichier .yaml généré par map_server
    prob_map = load_slam_map(yaml_file)
    
    # Entropie totale de la carte
    H_totale = map_entropy(prob_map)
    print(f"Entropie totale de la carte : {H_totale:.2f} bits")
    
    # Grille d'entropie par cellule (si besoin)
    H_cells = map_entropy(prob_map, per_cell=True)
    # Par exemple afficher l'entropie moyenne par cellule :
    print(f"Entropie moyenne par cellule : {H_cells.mean():.4f} bits")
